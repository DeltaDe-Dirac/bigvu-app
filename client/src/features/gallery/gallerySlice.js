import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

const initialState = {
  imageList: [],
  value: 0,
  status: "idle",
  message: "",
};

export const getImageListAsync = createAsyncThunk("gallery/fetchImageList", async (endpoint) => {
  // console.log("gallery/fetchImageList", endpoint);
  const res = await fetch("/test", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ url: endpoint }),
  });
  const data = await res.json();

  return data;
});

export const gallerySlice = createSlice({
  name: "gallery",
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getImageListAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getImageListAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value += 2;
        if (Array.isArray(action.payload)) {
          // console.log(JSON.stringify(action.payload));
          state.imageList = action.payload;
          // action.payload.forEach((obj) => state.imageList.set(obj.name, obj.value));
        } else if (action.payload.message) {
          console.warn(action.payload.message);
          state.message = action.payload.message;
        }
      });
  },
});

export const { increment, decrement, incrementByAmount } = gallerySlice.actions;
// ------------------------------------------------------------------------------------------

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectGallery = (state) => state.gallery.value;
export const selectImgList = (state) => state.gallery.imageList;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectGallery(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default gallerySlice.reducer;
